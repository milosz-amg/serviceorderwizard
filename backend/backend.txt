class ZCL_ZMR_ORDER_SRV_DPC_EXT definition
  public
  inheriting from ZCL_ZMR_ORDER_SRV_DPC
  create public .

public section.
protected section.

  methods DEVICEMODELSSET_GET_ENTITY
    redefinition .
  methods DEVICEMODELSSET_GET_ENTITYSET
    redefinition .
  methods DEVICETYPESSET_GET_ENTITY
    redefinition .
  methods DEVICETYPESSET_GET_ENTITYSET
    redefinition .
  methods ORDERSET_CREATE_ENTITY
    redefinition .
  methods ORDERSET_DELETE_ENTITY
    redefinition .
  methods ORDERSET_GET_ENTITY
    redefinition .
  methods ORDERSET_GET_ENTITYSET
    redefinition .
  methods ORDERSET_UPDATE_ENTITY
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_ZMR_ORDER_SRV_DPC_EXT IMPLEMENTATION.


METHOD devicemodelsset_get_entity.

  DATA: lv_model_id TYPE zmr_device_model-id,
        lo_mc       TYPE REF TO /iwbep/if_message_container.

  lv_model_id = it_key_tab[ name = 'Id' ]-value.

  TRY.
      SELECT SINGLE *
        FROM zmr_device_model
        INTO @er_entity
        WHERE id = @lv_model_id.

      IF sy-subrc <> 0.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = |DeviceModel with ID { lv_model_id } not found| ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = |Database error while reading DeviceModel with ID { lv_model_id }| ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

ENDMETHOD.


METHOD devicemodelsset_get_entityset.

  DATA: lv_where TYPE string,
        lo_mc    TYPE REF TO /iwbep/if_message_container.

  TRY.
      " Pobranie warunku WHERE z filtrów OData
      lv_where = io_tech_request_context->get_osql_where_clause( ).

      " SELECT z dynamicznym WHERE -> od razu do et_entityset
      SELECT *
        FROM zmr_device_model
        INTO TABLE @et_entityset
        WHERE (lv_where).

      " Jeśli brak wyników
      IF et_entityset IS INITIAL.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = 'No device models found for given filter' ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = 'Database error while reading device models' ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

ENDMETHOD.


METHOD devicetypesset_get_entity.

  DATA: lv_type_id TYPE zmr_device_type-id,
        lo_mc      TYPE REF TO /iwbep/if_message_container.

  lv_type_id = it_key_tab[ name = 'Id' ]-value.

  TRY.
      SELECT SINGLE *
        FROM zmr_device_type
        INTO @er_entity
        WHERE id = @lv_type_id.

      IF sy-subrc <> 0.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = |DeviceType with ID { lv_type_id } not found| ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = |Database error while reading DeviceType with ID { lv_type_id }| ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

ENDMETHOD.


METHOD devicetypesset_get_entityset.

  DATA lo_mc TYPE REF TO /iwbep/if_message_container.

  TRY.
      SELECT *
        FROM zmr_device_type
        INTO TABLE @et_entityset.

      IF et_entityset IS INITIAL.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = 'No device types found' ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = 'Database error while reading device types' ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

ENDMETHOD.


METHOD orderset_create_entity.

  DATA: ls_order   TYPE zmr_orders,
        lv_orderid TYPE zmr_orders-order_id,
        lo_mc      TYPE REF TO /iwbep/if_message_container.

  " Read entry data from request
  io_data_provider->read_entry_data(
    IMPORTING
      es_data = ls_order
  ).

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = '01'           " range number from SNRO
      object                  = 'ZMR_ORD_ID'   " SNRO object name
    IMPORTING
      number                  = lv_orderid
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      interval_overflow       = 5
      OTHERS                  = 6.

  IF sy-subrc <> 0.
    lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
    lo_mc->add_message_text_only(
      iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
      iv_msg_text = 'Failed to generate new Order ID from number range' ).
    RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
  ENDIF.

  ls_order-order_id = lv_orderid.
  ls_order-mandt    = sy-mandt.


  " Insert error handling
  TRY.
      INSERT zmr_orders FROM ls_order.
    CATCH cx_sy_itab_duplicate_key INTO DATA(lx_dup).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = |Order with ID { lv_orderid } already exists| ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = 'Sql database exception' ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.


  er_entity = ls_order.
ENDMETHOD.


METHOD orderset_delete_entity.

  DATA: lv_order_id TYPE zmr_orders-order_id,
        lo_mc       TYPE REF TO /iwbep/if_message_container.

  " --- Pobranie klucza z requesta ---
  READ TABLE it_key_tab INTO DATA(ls_key) WITH KEY name = 'OrderId'.
  IF sy-subrc = 0.
    lv_order_id = ls_key-value.
  ELSE.
    lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
    lo_mc->add_message_text_only(
      iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
      iv_msg_text = 'OrderId is required' ).
    RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
  ENDIF.

  " --- Próba usunięcia rekordu ---
  TRY.
      DELETE FROM zmr_orders WHERE order_id = @lv_order_id.

      IF sy-subrc <> 0.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = |Order with ID { lv_order_id } not found| ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = |Database error while deleting Order { lv_order_id }| ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

ENDMETHOD.


METHOD orderset_get_entity.

  DATA: lv_order_id TYPE zmr_orders-order_id,
        lo_mc       TYPE REF TO /iwbep/if_message_container.

  lv_order_id = it_key_tab[ name = 'OrderId' ]-value.

  TRY.
      SELECT SINGLE *
        FROM zmr_orders
        INTO @er_entity
        WHERE order_id = @lv_order_id.

      " Sprawdzenie, czy rekord istnieje
      IF sy-subrc <> 0.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = |Order with ID { lv_order_id } not found| ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = |Database error while reading order { lv_order_id }| ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

ENDMETHOD.


METHOD orderset_get_entityset.

  " ==== 1. Deklaracje tabel zakresów dla filtrowania ====
  DATA: lra_status              TYPE RANGE OF zmr_orders-status,
        wa_status               LIKE LINE OF lra_status,
        lra_order_creation_date TYPE RANGE OF zmr_orders-ordercreationdate,
        wa_order_creation_date  LIKE LINE OF lra_order_creation_date,
        lra_visitdate           TYPE RANGE OF zmr_orders-visitdate,
        wa_visitdate            LIKE LINE OF lra_visitdate,
        lv_order_by             TYPE string,
        lt_db_result            TYPE STANDARD TABLE OF zmr_orders,
        lt_filtered             TYPE STANDARD TABLE OF zmr_orders,
        lo_mc                   TYPE REF TO /iwbep/if_message_container.

  " ==== 2. Pobranie parametrów filtrowania i sortowania z requestu ====
  DATA(lr_filter) = io_tech_request_context->get_filter( ).
  DATA(lt_filter_select_options) = lr_filter->get_filter_select_options( ).
  DATA(lt_order_by) = io_tech_request_context->get_orderby( ).
  DATA(lv_search) = io_tech_request_context->get_search_string( ).

  " ==== 3. Wypełnienie tabel zakresów dla każdej kolumny ====
  LOOP AT lt_filter_select_options INTO DATA(ls_filter_select_options).

    " --- filtr Status ---
    IF ls_filter_select_options-property EQ 'STATUS'.
      LOOP AT ls_filter_select_options-select_options INTO DATA(ls_select_option).
        wa_status-sign   = ls_select_option-sign.
        wa_status-option = ls_select_option-option.
        wa_status-low    = ls_select_option-low.
        wa_status-high   = ls_select_option-high.
        APPEND wa_status TO lra_status.
      ENDLOOP.
    ENDIF.

    " --- filtr OrderCreationDate ---
    IF ls_filter_select_options-property EQ 'ORDERCREATIONDATE'.
      LOOP AT ls_filter_select_options-select_options INTO DATA(ls_select_option_date).
        wa_order_creation_date-sign   = ls_select_option_date-sign.
        wa_order_creation_date-option = ls_select_option_date-option.
        wa_order_creation_date-low    = ls_select_option_date-low.
        wa_order_creation_date-high   = ls_select_option_date-high.
        APPEND wa_order_creation_date TO lra_order_creation_date.
      ENDLOOP.
    ENDIF.

    " --- filtr Visitdate ---
    IF ls_filter_select_options-property EQ 'VISITDATE'.
      LOOP AT ls_filter_select_options-select_options INTO DATA(ls_select_option_visit).
        wa_visitdate-sign   = ls_select_option_visit-sign.
        wa_visitdate-option = ls_select_option_visit-option.
        wa_visitdate-low    = ls_select_option_visit-low.
        wa_visitdate-high   = ls_select_option_visit-high.
        APPEND wa_visitdate TO lra_visitdate.
      ENDLOOP.
    ENDIF.

  ENDLOOP.

  " ==== 4. Obsługa sortowania ====
  LOOP AT lt_order_by INTO DATA(ls_order_by).
    IF lv_order_by IS INITIAL.
      lv_order_by = |{ ls_order_by-property }|.
    ELSE.
      lv_order_by = |{ lv_order_by }, { ls_order_by-property }|.
    ENDIF.

    IF ls_order_by-order = 'asc'.
      lv_order_by = |{ lv_order_by } ASCENDING|.
    ELSE.
      lv_order_by = |{ lv_order_by } DESCENDING|.
    ENDIF.
  ENDLOOP.

  " ==== 5. Zapytanie do bazy z filtrowaniem i sortowaniem ====
  TRY.
      SELECT *
        FROM zmr_orders
        INTO TABLE @lt_db_result
        WHERE status IN @lra_status
          AND ordercreationdate IN @lra_order_creation_date
          AND visitdate IN @lra_visitdate
        ORDER BY (lv_order_by).

      IF sy-subrc <> 0.
        lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
        lo_mc->add_message_text_only(
          iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
          iv_msg_text = |EntitySet not found or empty| ).
        RAISE EXCEPTION NEW /iwbep/cx_mgw_busi_exception( message_container = lo_mc ).
      ENDIF.

    CATCH cx_sy_open_sql_db INTO DATA(lx_sql).
      lo_mc = me->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
      lo_mc->add_message_text_only(
        iv_msg_type = /iwbep/if_message_container=>gcs_message_type-error
        iv_msg_text = |Database connection error| ).
      RAISE EXCEPTION NEW /iwbep/cx_mgw_tech_exception( message_container = lo_mc ).
  ENDTRY.

  " ==== 5. Filtrowanie wyników w pamięci po search ====
  IF lv_search IS NOT INITIAL.
    LOOP AT lt_db_result ASSIGNING FIELD-SYMBOL(<fs_entity>).
      IF <fs_entity>-lastname CP |*{ lv_search }*|
        OR <fs_entity>-firstname CP |*{ lv_search }*|
        OR <fs_entity>-order_id CP |*{ lv_search }*|
        OR <fs_entity>-phonenumber CP |*{ lv_search }*|

        OR <fs_entity>-addresscity CP |*{ lv_search }*|
        OR <fs_entity>-addressfirstline CP |*{ lv_search }*|
        OR <fs_entity>-addresssecondline CP |*{ lv_search }*|
        OR <fs_entity>-addresszipcode CP |*{ lv_search }*|

        OR <fs_entity>-devicetype CP |*{ lv_search }*|
        OR <fs_entity>-devicemodel CP |*{ lv_search }*|
        OR <fs_entity>-deviceserialnumber CP |*{ lv_search }*|
        OR <fs_entity>-faultdescription CP |*{ lv_search }*|
        OR <fs_entity>-visittime CP |*{ lv_search }*|.

        APPEND <fs_entity> TO et_entityset.
      ENDIF.
    ENDLOOP.
  ELSE.
    et_entityset = lt_db_result.
  ENDIF.


ENDMETHOD.


  METHOD orderset_update_entity.
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_not_impl_exc
      EXPORTING
        textid = /iwbep/cx_mgw_not_impl_exc=>method_not_implemented
        method = 'ORDERSET_UPDATE_ENTITY'.
  ENDMETHOD.
ENDCLASS.